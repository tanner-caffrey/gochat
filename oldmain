// package main

// import (
// 	"fmt"
// 	"net"
// 	"os"
// 	"strconv"
// 	"sync"
// )

// const (
// 	CONNECTION_TYPE = "tcp"
// 	HOST            = "localhost"
// 	PORT            = "9987"
// )

// type Client struct {
// 	name       string
// 	id         int
// 	connection *net.Conn
// }

// type Server struct {
// 	listener net.Listener
// 	clientMu sync.Mutex
// 	clients  map[int]Client
// 	messages chan string
// }

// func main() {
// 	go startServer()
// 	// handleClients(&server)
// 	startClient()
// }

// func startClient() {
// 	connection, err := net.Dial(CONNECTION_TYPE, HOST+":"+PORT)
// 	if err != nil {
// 		exitWithError("Client failed to connect", err)
// 	}

// 	_, err = connection.Write([]byte("Hello, world!"))
// 	for {
// 		time.sleep(1)
// 	}
// }

// func startServer() Server {
// 	fmt.Println("Server starting.")
// 	listener, err := net.Listen(CONNECTION_TYPE, HOST+":"+PORT)
// 	if err != nil {
// 		exitWithError("Error starting server listener", err)
// 	}
// 	defer listener.Close()
// 	fmt.Println("Listening on", HOST, ":", PORT)

// 	server := Server{listener: listener, clients: make(map[int]Client), messages: make(chan string)}
// 	clients := 0
// 	for {
// 		connection, err := server.listener.Accept()
// 		if err != nil {
// 			exitWithError("Error accepting client connection", err)
// 		}

// 		clients++
// 		client := Client{name: "Client" + strconv.Itoa(clients), id: clients, connection: &connection}

// 		// Add to server client list
// 		server.clientMu.Lock()
// 		server.clients[clients] = client
// 		server.clientMu.Unlock()

// 		fmt.Println("Accepted connection from client", client.name, ".")
// 		go handleClient(&server, &client)
// 	}
// }

// // func handleClients(server *Server) {

// // }

// func handleClient(server *Server, client *Client) {
// 	buffer := make([]byte, 1024)
// 	con := *client.connection
// 	// Listen for messages recieved from client
// 	go func() {
// 		for {
// 			messageLength, err := con.Read(buffer)
// 			if err != nil {
// 				warn("Error reading from client"+client.name, err)
// 			}
// 			fmt.Println("Recieved message from", client.name, " of length", strconv.Itoa(messageLength))
// 			server.messages <- string(buffer)
// 		}
// 	}()

// 	// Send message to client from server
// 	go func() {
// 		for {
// 			message := <-server.messages
// 			for _, client := range server.clients {
// 				(*client.connection).Write([]byte(message))
// 			}
// 		}
// 	}()
// }

// func sendToClient(message string) {

// }

// func exitWithError(message string, err error) {
// 	fmt.Println("[X]", message, ":", err.Error())
// 	os.Exit(1)
// }

// func warn(message string, err error) {
// 	fmt.Println("[!]", message, ":", err.Error())
// }

// // func warn(message string) {
// // 	fmt.Println("[!] ", message)
// // }
